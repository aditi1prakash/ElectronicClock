
/*
 * Filename: swc_clock.h
 *
 * Author: Autogenerated by H-DA RTE Generator, (c) Prof. Fromm
 */

#ifndef _H_DEFINE_SWC_CLOCK
#define _H_DEFINE_SWC_CLOCK

#include "project.h"
#include "global.h"
#include "rte_types.h"
    

/* USER CODE START SWC_CLOCK_INCLUDES */
    
/* USER CODE END SWC_CLOCK_INCLUDES */



/* USER CODE START SWC_CLOCK_USERDEFINITIONS */
    
/* States table for container states */
typedef enum {
    STATE_CLOCK_C_ISDISPLAYING,
    STATE_CLOCK_C_ISEDITINGHOURS,
    STATE_CLOCK_C_ISEDITINGMINUTES,
    STATE_CLOCK_W_ISDISPLAYING,
    STATE_CLOCK_W_ISEDITING,
    STATE_CLOCK_W_ISAUTOINCREMENT
} CLOCK_state_t;

//These values are set by iterative process and can be modified based on user requirements
#define     TFT_HOUR_X_COORDINATE        24
#define     TFT_WIDGET_Y_COORDINATE      73      
#define     TFT_MINUTE_X_COORDINATE      68
#define     TFT_EDITMODE_WIDTH           36
#define     TFT_EDITMODE_HEIGHT          27

/* USER CODE END SWC_CLOCK_USERDEFINITIONS */


/*
* component: swc_clock
* cycletime: 50
* description: Runnable to process incoming events
* events: 
* name: CLOCK_input_run
* shortname: input
* signalIN: 
* signalOUT: so_event
* task: tsk_cyclic
*/
void CLOCK_input_run(RTE_event ev);

/*
* component: swc_clock
* cycletime: 0
* description: Control runnable that runs the State Machine
* events: ev_event_onData
* name: CLOCK_control_run
* shortname: control
* signalIN: so_event
* signalOUT: so_clock
* task: tsk_event
*/
void CLOCK_control_run(RTE_event ev);

/*
* component: swc_clock
* cycletime: 250
* description: Runnable for display driver
* events: 
* name: CLOCK_display_run
* shortname: display
* signalIN: so_clock
* signalOUT: so_display
* task: tsk_cyclic
*/
void CLOCK_display_run(RTE_event ev);


#endif